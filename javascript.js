// API Key t·ª´ OpenWeatherMap
const apiKey = '1eb0ddc1b16e83cf956300b0da1216cc'; // Thay b·∫±ng API Key c·ªßa b·∫°n

// ƒê·ªëi t∆∞·ª£ng ch·ª©a c√°c b·∫£n d·ªãch v√† emoji th·ªùi ti·∫øt
const translations = {
  en: {
    title: "Weather Forecast",
    languageLabel: "Language:",
    searchPlaceholder: "Enter city name",
    temperature: "Temperature",
    feels_like: "Feels Like",
    weather: "Weather",
    humidity: "Humidity",
    wind: "Wind Speed",
    pressure: "Pressure",
    dew_point: "Dew Point",
    forecast: "Weekly Forecast",
    error: "City not found"
  },
  vi: {
    title: "D·ª± b√°o th·ªùi ti·∫øt",
    languageLabel: "Ng√¥n ng·ªØ:",
    searchPlaceholder: "Nh·∫≠p t√™n th√†nh ph·ªë",
    temperature: "Nhi·ªát ƒë·ªô",
    feels_like: "C·∫£m gi√°c nh∆∞",
    weather: "Th·ªùi ti·∫øt",
    humidity: "ƒê·ªô ·∫©m",
    wind: "T·ªëc ƒë·ªô gi√≥",
    pressure: "√Åp su·∫•t",
    dew_point: "ƒêi·ªÉm s∆∞∆°ng",
    forecast: "D·ª± b√°o h√†ng tu·∫ßn",
    error: "Th√†nh ph·ªë kh√¥ng t·ªìn t·∫°i"
  }
};

// Chuy·ªÉn ƒë·ªïi gi·ªØa ch·∫ø ƒë·ªô ban ƒë√™m v√† ban ng√†y
function toggleMode() {
  document.body.classList.toggle('dark-mode');
  document.querySelector('.weather-app').classList.toggle('dark-mode');
  const button = document.querySelector('.mode-toggle button');
  if (document.body.classList.contains('dark-mode')) {
    button.textContent = 'üåû Ban ng√†y';
  } else {
    button.textContent = 'üåô ƒê√™m';
  }
}

// Ng√¥n ng·ªØ hi·ªán t·∫°i (m·∫∑c ƒë·ªãnh l√† ti·∫øng Vi·ªát)
let currentLanguage = 'vi';

// H√†m ch·ªçn emoji ph√π h·ª£p v·ªõi ƒëi·ªÅu ki·ªán th·ªùi ti·∫øt
function getWeatherEmoji(weatherDescription) {
  const description = weatherDescription.toLowerCase();
  if (description.includes("clear")) return "‚òÄÔ∏è"; // Tr·ªùi trong
  if (description.includes("clouds")) return "‚òÅÔ∏è"; // C√≥ m√¢y
  if (description.includes("rain")) return "üåßÔ∏è"; // M∆∞a
  if (description.includes("thunderstorm")) return "‚õàÔ∏è"; // B√£o
  if (description.includes("snow")) return "‚ùÑÔ∏è"; // Tuy·∫øt
  if (description.includes("mist") || description.includes("fog")) return "üå´Ô∏è"; // S∆∞∆°ng m√π
  if (description.includes("drizzle")) return "üå¶Ô∏è"; // M∆∞a ph√πn
  return "üå°Ô∏è"; // Th·ªùi ti·∫øt kh√°c
}

// H√†m c·∫≠p nh·∫≠t ng√¥n ng·ªØ
function updateLanguage(language) {
  currentLanguage = language;
  
  // C·∫≠p nh·∫≠t c√°c nh√£n
  document.getElementById('title').textContent = translations[language].title;
  document.getElementById('languageLabel').textContent = translations[language].languageLabel;
  document.getElementById('city').placeholder = translations[language].searchPlaceholder;
  
  // N·∫øu ƒë√£ c√≥ d·ªØ li·ªáu th·ªùi ti·∫øt, c·∫≠p nh·∫≠t l·∫°i b·∫±ng ng√¥n ng·ªØ m·ªõi
  const city = document.getElementById('city').value;
  if (city) {
    getWeather();
  }
}

// X·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi d√πng thay ƒë·ªïi ng√¥n ng·ªØ
document.addEventListener('DOMContentLoaded', () => {
  const languageSelect = document.getElementById('languageSelect');
  languageSelect.value = currentLanguage;
  languageSelect.addEventListener('change', function (e) {
    updateLanguage(e.target.value);
  });
  
  // Th√™m s·ª± ki·ªán cho n√∫t chuy·ªÉn ch·∫ø ƒë·ªô ban ƒë√™m/b·∫°n ng√†y
  const modeToggleButton = document.querySelector('.mode-toggle button');
  modeToggleButton.addEventListener('click', toggleMode);
});

// H√†m l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt
async function getWeather() {
  const city = document.getElementById('city').value.trim();
  if (!city) return;

  const urlCurrent = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric&lang=${currentLanguage}`;
  const urlForecast = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=metric&lang=${currentLanguage}`;

  try {
    const [currentResponse, forecastResponse] = await Promise.all([
      fetch(urlCurrent),
      fetch(urlForecast)
    ]);

    if (!currentResponse.ok || !forecastResponse.ok) throw new Error(translations[currentLanguage].error);

    const currentData = await currentResponse.json();
    const forecastData = await forecastResponse.json();

    // Hi·ªÉn th·ªã th√¥ng tin th·ªùi ti·∫øt hi·ªán t·∫°i
    const weatherEmoji = getWeatherEmoji(currentData.weather[0].description);
    document.getElementById('weather-main').innerHTML = `
      <h2>${currentData.name}, ${currentData.sys.country}</h2>
      <p>${new Date().toLocaleDateString(currentLanguage === 'vi' ? 'vi-VN' : 'en-US')}</p>
      <p>${weatherEmoji} ${currentData.weather[0].description}</p>
      <p>${translations[currentLanguage].temperature}: ${currentData.main.temp} ¬∞C</p>
      <p>${translations[currentLanguage].feels_like}: ${currentData.main.feels_like} ¬∞C</p>
      <p>${translations[currentLanguage].humidity}: ${currentData.main.humidity}%</p>
      <p>${translations[currentLanguage].wind}: ${currentData.wind.speed} m/s</p>
    `;

    // Hi·ªÉn th·ªã th√¥ng tin th·ªùi ti·∫øt chi ti·∫øt
    const dewPoint = calculateDewPoint(currentData.main.temp, currentData.main.humidity);
    const detailsHTML = `
      <div><p>${translations[currentLanguage].pressure}: ${currentData.main.pressure} hPa</p></div>
      <div><p>${translations[currentLanguage].dew_point}: ${dewPoint} ¬∞C</p></div>
    `;
    document.getElementById('weather-details').innerHTML = detailsHTML;

    // Hi·ªÉn th·ªã d·ª± b√°o tu·∫ßn
    let weeklyHTML = `<h3>${translations[currentLanguage].forecast}</h3>`;
    for (let i = 0; i < forecastData.list.length; i += 8) {  // L·∫•y d·ªØ li·ªáu d·ª± b√°o m·ªói ng√†y m·ªôt l·∫ßn
      const day = forecastData.list[i];
      const dateOptions = { weekday: 'short', day: 'numeric', month: 'short' };
      const date = new Date(day.dt * 1000).toLocaleDateString(currentLanguage === 'vi' ? 'vi-VN' : 'en-US', dateOptions);
      const dayEmoji = getWeatherEmoji(day.weather[0].description);
      weeklyHTML += `
        <div>
          <p>${date}</p>
          <p>${dayEmoji} ${day.weather[0].description}</p>
          <p>${translations[currentLanguage].temperature}: ${day.main.temp_min}¬∞ - ${day.main.temp_max}¬∞C</p>
        </div>
      `;
    }
    document.getElementById('weather-weekly').innerHTML = weeklyHTML;

  } catch (error) {
    document.getElementById('weather-main').innerHTML = `<p style="color: red;">${error.message}</p>`;
    document.getElementById('weather-details').innerHTML = '';
    document.getElementById('weather-weekly').innerHTML = '';
  }
}

// H√†m t√≠nh ƒëi·ªÉm s∆∞∆°ng (t√πy ch·ªçn)
function calculateDewPoint(temp, humidity) {
  const a = 17.27;
  const b = 237.7;
  const alpha = ((a * temp) / (b + temp)) + Math.log(humidity / 100.0);
  const dewPoint = (b * alpha) / (a - alpha);
  return dewPoint.toFixed(1);
}
